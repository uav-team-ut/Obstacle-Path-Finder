// This file is generated by rust-protobuf 2.10.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `nsfw.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_10_1;

#[derive(PartialEq,Clone,Default)]
pub struct Response {
    // message fields
    pub success: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Response {
    fn default() -> &'a Response {
        <Response as ::protobuf::Message>::default_instance()
    }
}

impl Response {
    pub fn new() -> Response {
        ::std::default::Default::default()
    }

    // bool success = 1;


    pub fn get_success(&self) -> bool {
        self.success
    }
    pub fn clear_success(&mut self) {
        self.success = false;
    }

    // Param is passed by value, moved
    pub fn set_success(&mut self, v: bool) {
        self.success = v;
    }
}

impl ::protobuf::Message for Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.success = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.success != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.success != false {
            os.write_bool(1, self.success)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Response {
        Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "success",
                    |m: &Response| { &m.success },
                    |m: &mut Response| { &mut m.success },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Response>(
                    "Response",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Response {
        static mut instance: ::protobuf::lazy::Lazy<Response> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Response,
        };
        unsafe {
            instance.get(Response::new)
        }
    }
}

impl ::protobuf::Clear for Response {
    fn clear(&mut self) {
        self.success = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Response {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PathRequest {
    // message fields
    pub flyzoneList: ::protobuf::RepeatedField<Flyzone>,
    pub obstacleList: ::protobuf::RepeatedField<Obstacle>,
    pub oldWaypoints: ::protobuf::RepeatedField<Point>,
    pub planeLocation: ::protobuf::SingularPtrField<Point>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PathRequest {
    fn default() -> &'a PathRequest {
        <PathRequest as ::protobuf::Message>::default_instance()
    }
}

impl PathRequest {
    pub fn new() -> PathRequest {
        ::std::default::Default::default()
    }

    // repeated .pathfinder.Flyzone flyzoneList = 1;


    pub fn get_flyzoneList(&self) -> &[Flyzone] {
        &self.flyzoneList
    }
    pub fn clear_flyzoneList(&mut self) {
        self.flyzoneList.clear();
    }

    // Param is passed by value, moved
    pub fn set_flyzoneList(&mut self, v: ::protobuf::RepeatedField<Flyzone>) {
        self.flyzoneList = v;
    }

    // Mutable pointer to the field.
    pub fn mut_flyzoneList(&mut self) -> &mut ::protobuf::RepeatedField<Flyzone> {
        &mut self.flyzoneList
    }

    // Take field
    pub fn take_flyzoneList(&mut self) -> ::protobuf::RepeatedField<Flyzone> {
        ::std::mem::replace(&mut self.flyzoneList, ::protobuf::RepeatedField::new())
    }

    // repeated .pathfinder.Obstacle obstacleList = 2;


    pub fn get_obstacleList(&self) -> &[Obstacle] {
        &self.obstacleList
    }
    pub fn clear_obstacleList(&mut self) {
        self.obstacleList.clear();
    }

    // Param is passed by value, moved
    pub fn set_obstacleList(&mut self, v: ::protobuf::RepeatedField<Obstacle>) {
        self.obstacleList = v;
    }

    // Mutable pointer to the field.
    pub fn mut_obstacleList(&mut self) -> &mut ::protobuf::RepeatedField<Obstacle> {
        &mut self.obstacleList
    }

    // Take field
    pub fn take_obstacleList(&mut self) -> ::protobuf::RepeatedField<Obstacle> {
        ::std::mem::replace(&mut self.obstacleList, ::protobuf::RepeatedField::new())
    }

    // repeated .pathfinder.Point oldWaypoints = 3;


    pub fn get_oldWaypoints(&self) -> &[Point] {
        &self.oldWaypoints
    }
    pub fn clear_oldWaypoints(&mut self) {
        self.oldWaypoints.clear();
    }

    // Param is passed by value, moved
    pub fn set_oldWaypoints(&mut self, v: ::protobuf::RepeatedField<Point>) {
        self.oldWaypoints = v;
    }

    // Mutable pointer to the field.
    pub fn mut_oldWaypoints(&mut self) -> &mut ::protobuf::RepeatedField<Point> {
        &mut self.oldWaypoints
    }

    // Take field
    pub fn take_oldWaypoints(&mut self) -> ::protobuf::RepeatedField<Point> {
        ::std::mem::replace(&mut self.oldWaypoints, ::protobuf::RepeatedField::new())
    }

    // .pathfinder.Point planeLocation = 4;


    pub fn get_planeLocation(&self) -> &Point {
        self.planeLocation.as_ref().unwrap_or_else(|| Point::default_instance())
    }
    pub fn clear_planeLocation(&mut self) {
        self.planeLocation.clear();
    }

    pub fn has_planeLocation(&self) -> bool {
        self.planeLocation.is_some()
    }

    // Param is passed by value, moved
    pub fn set_planeLocation(&mut self, v: Point) {
        self.planeLocation = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_planeLocation(&mut self) -> &mut Point {
        if self.planeLocation.is_none() {
            self.planeLocation.set_default();
        }
        self.planeLocation.as_mut().unwrap()
    }

    // Take field
    pub fn take_planeLocation(&mut self) -> Point {
        self.planeLocation.take().unwrap_or_else(|| Point::new())
    }
}

impl ::protobuf::Message for PathRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.flyzoneList {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.obstacleList {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.oldWaypoints {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.planeLocation {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.flyzoneList)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.obstacleList)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.oldWaypoints)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.planeLocation)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.flyzoneList {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.obstacleList {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.oldWaypoints {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.planeLocation.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.flyzoneList {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.obstacleList {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.oldWaypoints {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.planeLocation.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PathRequest {
        PathRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Flyzone>>(
                    "flyzoneList",
                    |m: &PathRequest| { &m.flyzoneList },
                    |m: &mut PathRequest| { &mut m.flyzoneList },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Obstacle>>(
                    "obstacleList",
                    |m: &PathRequest| { &m.obstacleList },
                    |m: &mut PathRequest| { &mut m.obstacleList },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Point>>(
                    "oldWaypoints",
                    |m: &PathRequest| { &m.oldWaypoints },
                    |m: &mut PathRequest| { &mut m.oldWaypoints },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Point>>(
                    "planeLocation",
                    |m: &PathRequest| { &m.planeLocation },
                    |m: &mut PathRequest| { &mut m.planeLocation },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PathRequest>(
                    "PathRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PathRequest {
        static mut instance: ::protobuf::lazy::Lazy<PathRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PathRequest,
        };
        unsafe {
            instance.get(PathRequest::new)
        }
    }
}

impl ::protobuf::Clear for PathRequest {
    fn clear(&mut self) {
        self.flyzoneList.clear();
        self.obstacleList.clear();
        self.oldWaypoints.clear();
        self.planeLocation.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PathRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PathRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PathResponse {
    // message fields
    pub newWaypoints: ::protobuf::RepeatedField<Point>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PathResponse {
    fn default() -> &'a PathResponse {
        <PathResponse as ::protobuf::Message>::default_instance()
    }
}

impl PathResponse {
    pub fn new() -> PathResponse {
        ::std::default::Default::default()
    }

    // repeated .pathfinder.Point newWaypoints = 1;


    pub fn get_newWaypoints(&self) -> &[Point] {
        &self.newWaypoints
    }
    pub fn clear_newWaypoints(&mut self) {
        self.newWaypoints.clear();
    }

    // Param is passed by value, moved
    pub fn set_newWaypoints(&mut self, v: ::protobuf::RepeatedField<Point>) {
        self.newWaypoints = v;
    }

    // Mutable pointer to the field.
    pub fn mut_newWaypoints(&mut self) -> &mut ::protobuf::RepeatedField<Point> {
        &mut self.newWaypoints
    }

    // Take field
    pub fn take_newWaypoints(&mut self) -> ::protobuf::RepeatedField<Point> {
        ::std::mem::replace(&mut self.newWaypoints, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for PathResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.newWaypoints {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.newWaypoints)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.newWaypoints {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.newWaypoints {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PathResponse {
        PathResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Point>>(
                    "newWaypoints",
                    |m: &PathResponse| { &m.newWaypoints },
                    |m: &mut PathResponse| { &mut m.newWaypoints },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PathResponse>(
                    "PathResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PathResponse {
        static mut instance: ::protobuf::lazy::Lazy<PathResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PathResponse,
        };
        unsafe {
            instance.get(PathResponse::new)
        }
    }
}

impl ::protobuf::Clear for PathResponse {
    fn clear(&mut self) {
        self.newWaypoints.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PathResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PathResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AvoidRequest {
    // message fields
    pub nextWaypoint: ::protobuf::SingularPtrField<Point>,
    pub planeLocation: ::protobuf::SingularPtrField<Point>,
    pub enemyLocation: ::protobuf::SingularPtrField<Point>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AvoidRequest {
    fn default() -> &'a AvoidRequest {
        <AvoidRequest as ::protobuf::Message>::default_instance()
    }
}

impl AvoidRequest {
    pub fn new() -> AvoidRequest {
        ::std::default::Default::default()
    }

    // .pathfinder.Point nextWaypoint = 1;


    pub fn get_nextWaypoint(&self) -> &Point {
        self.nextWaypoint.as_ref().unwrap_or_else(|| Point::default_instance())
    }
    pub fn clear_nextWaypoint(&mut self) {
        self.nextWaypoint.clear();
    }

    pub fn has_nextWaypoint(&self) -> bool {
        self.nextWaypoint.is_some()
    }

    // Param is passed by value, moved
    pub fn set_nextWaypoint(&mut self, v: Point) {
        self.nextWaypoint = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_nextWaypoint(&mut self) -> &mut Point {
        if self.nextWaypoint.is_none() {
            self.nextWaypoint.set_default();
        }
        self.nextWaypoint.as_mut().unwrap()
    }

    // Take field
    pub fn take_nextWaypoint(&mut self) -> Point {
        self.nextWaypoint.take().unwrap_or_else(|| Point::new())
    }

    // .pathfinder.Point planeLocation = 2;


    pub fn get_planeLocation(&self) -> &Point {
        self.planeLocation.as_ref().unwrap_or_else(|| Point::default_instance())
    }
    pub fn clear_planeLocation(&mut self) {
        self.planeLocation.clear();
    }

    pub fn has_planeLocation(&self) -> bool {
        self.planeLocation.is_some()
    }

    // Param is passed by value, moved
    pub fn set_planeLocation(&mut self, v: Point) {
        self.planeLocation = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_planeLocation(&mut self) -> &mut Point {
        if self.planeLocation.is_none() {
            self.planeLocation.set_default();
        }
        self.planeLocation.as_mut().unwrap()
    }

    // Take field
    pub fn take_planeLocation(&mut self) -> Point {
        self.planeLocation.take().unwrap_or_else(|| Point::new())
    }

    // .pathfinder.Point enemyLocation = 3;


    pub fn get_enemyLocation(&self) -> &Point {
        self.enemyLocation.as_ref().unwrap_or_else(|| Point::default_instance())
    }
    pub fn clear_enemyLocation(&mut self) {
        self.enemyLocation.clear();
    }

    pub fn has_enemyLocation(&self) -> bool {
        self.enemyLocation.is_some()
    }

    // Param is passed by value, moved
    pub fn set_enemyLocation(&mut self, v: Point) {
        self.enemyLocation = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_enemyLocation(&mut self) -> &mut Point {
        if self.enemyLocation.is_none() {
            self.enemyLocation.set_default();
        }
        self.enemyLocation.as_mut().unwrap()
    }

    // Take field
    pub fn take_enemyLocation(&mut self) -> Point {
        self.enemyLocation.take().unwrap_or_else(|| Point::new())
    }
}

impl ::protobuf::Message for AvoidRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.nextWaypoint {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.planeLocation {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.enemyLocation {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.nextWaypoint)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.planeLocation)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.enemyLocation)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.nextWaypoint.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.planeLocation.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.enemyLocation.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.nextWaypoint.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.planeLocation.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.enemyLocation.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AvoidRequest {
        AvoidRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Point>>(
                    "nextWaypoint",
                    |m: &AvoidRequest| { &m.nextWaypoint },
                    |m: &mut AvoidRequest| { &mut m.nextWaypoint },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Point>>(
                    "planeLocation",
                    |m: &AvoidRequest| { &m.planeLocation },
                    |m: &mut AvoidRequest| { &mut m.planeLocation },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Point>>(
                    "enemyLocation",
                    |m: &AvoidRequest| { &m.enemyLocation },
                    |m: &mut AvoidRequest| { &mut m.enemyLocation },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AvoidRequest>(
                    "AvoidRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AvoidRequest {
        static mut instance: ::protobuf::lazy::Lazy<AvoidRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AvoidRequest,
        };
        unsafe {
            instance.get(AvoidRequest::new)
        }
    }
}

impl ::protobuf::Clear for AvoidRequest {
    fn clear(&mut self) {
        self.nextWaypoint.clear();
        self.planeLocation.clear();
        self.enemyLocation.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AvoidRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AvoidRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AvoidResponse {
    // message fields
    pub enemyOb: ::protobuf::SingularPtrField<Obstacle>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AvoidResponse {
    fn default() -> &'a AvoidResponse {
        <AvoidResponse as ::protobuf::Message>::default_instance()
    }
}

impl AvoidResponse {
    pub fn new() -> AvoidResponse {
        ::std::default::Default::default()
    }

    // .pathfinder.Obstacle enemyOb = 1;


    pub fn get_enemyOb(&self) -> &Obstacle {
        self.enemyOb.as_ref().unwrap_or_else(|| Obstacle::default_instance())
    }
    pub fn clear_enemyOb(&mut self) {
        self.enemyOb.clear();
    }

    pub fn has_enemyOb(&self) -> bool {
        self.enemyOb.is_some()
    }

    // Param is passed by value, moved
    pub fn set_enemyOb(&mut self, v: Obstacle) {
        self.enemyOb = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_enemyOb(&mut self) -> &mut Obstacle {
        if self.enemyOb.is_none() {
            self.enemyOb.set_default();
        }
        self.enemyOb.as_mut().unwrap()
    }

    // Take field
    pub fn take_enemyOb(&mut self) -> Obstacle {
        self.enemyOb.take().unwrap_or_else(|| Obstacle::new())
    }
}

impl ::protobuf::Message for AvoidResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.enemyOb {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.enemyOb)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.enemyOb.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.enemyOb.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AvoidResponse {
        AvoidResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Obstacle>>(
                    "enemyOb",
                    |m: &AvoidResponse| { &m.enemyOb },
                    |m: &mut AvoidResponse| { &mut m.enemyOb },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AvoidResponse>(
                    "AvoidResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AvoidResponse {
        static mut instance: ::protobuf::lazy::Lazy<AvoidResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AvoidResponse,
        };
        unsafe {
            instance.get(AvoidResponse::new)
        }
    }
}

impl ::protobuf::Clear for AvoidResponse {
    fn clear(&mut self) {
        self.enemyOb.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AvoidResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AvoidResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Point {
    // message fields
    pub lat: f64,
    pub lon: f64,
    pub alt: f64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Point {
    fn default() -> &'a Point {
        <Point as ::protobuf::Message>::default_instance()
    }
}

impl Point {
    pub fn new() -> Point {
        ::std::default::Default::default()
    }

    // double lat = 1;


    pub fn get_lat(&self) -> f64 {
        self.lat
    }
    pub fn clear_lat(&mut self) {
        self.lat = 0.;
    }

    // Param is passed by value, moved
    pub fn set_lat(&mut self, v: f64) {
        self.lat = v;
    }

    // double lon = 2;


    pub fn get_lon(&self) -> f64 {
        self.lon
    }
    pub fn clear_lon(&mut self) {
        self.lon = 0.;
    }

    // Param is passed by value, moved
    pub fn set_lon(&mut self, v: f64) {
        self.lon = v;
    }

    // double alt = 3;


    pub fn get_alt(&self) -> f64 {
        self.alt
    }
    pub fn clear_alt(&mut self) {
        self.alt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_alt(&mut self, v: f64) {
        self.alt = v;
    }
}

impl ::protobuf::Message for Point {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.lat = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.lon = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.alt = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.lat != 0. {
            my_size += 9;
        }
        if self.lon != 0. {
            my_size += 9;
        }
        if self.alt != 0. {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.lat != 0. {
            os.write_double(1, self.lat)?;
        }
        if self.lon != 0. {
            os.write_double(2, self.lon)?;
        }
        if self.alt != 0. {
            os.write_double(3, self.alt)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Point {
        Point::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "lat",
                    |m: &Point| { &m.lat },
                    |m: &mut Point| { &mut m.lat },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "lon",
                    |m: &Point| { &m.lon },
                    |m: &mut Point| { &mut m.lon },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "alt",
                    |m: &Point| { &m.alt },
                    |m: &mut Point| { &mut m.alt },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Point>(
                    "Point",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Point {
        static mut instance: ::protobuf::lazy::Lazy<Point> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Point,
        };
        unsafe {
            instance.get(Point::new)
        }
    }
}

impl ::protobuf::Clear for Point {
    fn clear(&mut self) {
        self.lat = 0.;
        self.lon = 0.;
        self.alt = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Point {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Point {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Obstacle {
    // message fields
    pub center: ::protobuf::SingularPtrField<Point>,
    pub radius: f64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Obstacle {
    fn default() -> &'a Obstacle {
        <Obstacle as ::protobuf::Message>::default_instance()
    }
}

impl Obstacle {
    pub fn new() -> Obstacle {
        ::std::default::Default::default()
    }

    // .pathfinder.Point center = 1;


    pub fn get_center(&self) -> &Point {
        self.center.as_ref().unwrap_or_else(|| Point::default_instance())
    }
    pub fn clear_center(&mut self) {
        self.center.clear();
    }

    pub fn has_center(&self) -> bool {
        self.center.is_some()
    }

    // Param is passed by value, moved
    pub fn set_center(&mut self, v: Point) {
        self.center = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_center(&mut self) -> &mut Point {
        if self.center.is_none() {
            self.center.set_default();
        }
        self.center.as_mut().unwrap()
    }

    // Take field
    pub fn take_center(&mut self) -> Point {
        self.center.take().unwrap_or_else(|| Point::new())
    }

    // double radius = 2;


    pub fn get_radius(&self) -> f64 {
        self.radius
    }
    pub fn clear_radius(&mut self) {
        self.radius = 0.;
    }

    // Param is passed by value, moved
    pub fn set_radius(&mut self, v: f64) {
        self.radius = v;
    }
}

impl ::protobuf::Message for Obstacle {
    fn is_initialized(&self) -> bool {
        for v in &self.center {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.center)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.radius = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.center.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.radius != 0. {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.center.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.radius != 0. {
            os.write_double(2, self.radius)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Obstacle {
        Obstacle::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Point>>(
                    "center",
                    |m: &Obstacle| { &m.center },
                    |m: &mut Obstacle| { &mut m.center },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "radius",
                    |m: &Obstacle| { &m.radius },
                    |m: &mut Obstacle| { &mut m.radius },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Obstacle>(
                    "Obstacle",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Obstacle {
        static mut instance: ::protobuf::lazy::Lazy<Obstacle> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Obstacle,
        };
        unsafe {
            instance.get(Obstacle::new)
        }
    }
}

impl ::protobuf::Clear for Obstacle {
    fn clear(&mut self) {
        self.center.clear();
        self.radius = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Obstacle {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Obstacle {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Flyzone {
    // message fields
    pub polygon: ::protobuf::RepeatedField<Point>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Flyzone {
    fn default() -> &'a Flyzone {
        <Flyzone as ::protobuf::Message>::default_instance()
    }
}

impl Flyzone {
    pub fn new() -> Flyzone {
        ::std::default::Default::default()
    }

    // repeated .pathfinder.Point polygon = 1;


    pub fn get_polygon(&self) -> &[Point] {
        &self.polygon
    }
    pub fn clear_polygon(&mut self) {
        self.polygon.clear();
    }

    // Param is passed by value, moved
    pub fn set_polygon(&mut self, v: ::protobuf::RepeatedField<Point>) {
        self.polygon = v;
    }

    // Mutable pointer to the field.
    pub fn mut_polygon(&mut self) -> &mut ::protobuf::RepeatedField<Point> {
        &mut self.polygon
    }

    // Take field
    pub fn take_polygon(&mut self) -> ::protobuf::RepeatedField<Point> {
        ::std::mem::replace(&mut self.polygon, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Flyzone {
    fn is_initialized(&self) -> bool {
        for v in &self.polygon {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.polygon)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.polygon {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.polygon {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Flyzone {
        Flyzone::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Point>>(
                    "polygon",
                    |m: &Flyzone| { &m.polygon },
                    |m: &mut Flyzone| { &mut m.polygon },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Flyzone>(
                    "Flyzone",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Flyzone {
        static mut instance: ::protobuf::lazy::Lazy<Flyzone> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Flyzone,
        };
        unsafe {
            instance.get(Flyzone::new)
        }
    }
}

impl ::protobuf::Clear for Flyzone {
    fn clear(&mut self) {
        self.polygon.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Flyzone {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Flyzone {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\nnsfw.proto\x12\npathfinder\"$\n\x08Response\x12\x18\n\x07success\x18\
    \x01\x20\x01(\x08R\x07success\"\xee\x01\n\x0bPathRequest\x125\n\x0bflyzo\
    neList\x18\x01\x20\x03(\x0b2\x13.pathfinder.FlyzoneR\x0bflyzoneList\x128\
    \n\x0cobstacleList\x18\x02\x20\x03(\x0b2\x14.pathfinder.ObstacleR\x0cobs\
    tacleList\x125\n\x0coldWaypoints\x18\x03\x20\x03(\x0b2\x11.pathfinder.Po\
    intR\x0coldWaypoints\x127\n\rplaneLocation\x18\x04\x20\x01(\x0b2\x11.pat\
    hfinder.PointR\rplaneLocation\"E\n\x0cPathResponse\x125\n\x0cnewWaypoint\
    s\x18\x01\x20\x03(\x0b2\x11.pathfinder.PointR\x0cnewWaypoints\"\xb7\x01\
    \n\x0cAvoidRequest\x125\n\x0cnextWaypoint\x18\x01\x20\x01(\x0b2\x11.path\
    finder.PointR\x0cnextWaypoint\x127\n\rplaneLocation\x18\x02\x20\x01(\x0b\
    2\x11.pathfinder.PointR\rplaneLocation\x127\n\renemyLocation\x18\x03\x20\
    \x01(\x0b2\x11.pathfinder.PointR\renemyLocation\"?\n\rAvoidResponse\x12.\
    \n\x07enemyOb\x18\x01\x20\x01(\x0b2\x14.pathfinder.ObstacleR\x07enemyOb\
    \"=\n\x05Point\x12\x10\n\x03lat\x18\x01\x20\x01(\x01R\x03lat\x12\x10\n\
    \x03lon\x18\x02\x20\x01(\x01R\x03lon\x12\x10\n\x03alt\x18\x03\x20\x01(\
    \x01R\x03alt\"M\n\x08Obstacle\x12)\n\x06center\x18\x01\x20\x01(\x0b2\x11\
    .pathfinder.PointR\x06center\x12\x16\n\x06radius\x18\x02\x20\x01(\x01R\
    \x06radius\"6\n\x07Flyzone\x12+\n\x07polygon\x18\x01\x20\x03(\x0b2\x11.p\
    athfinder.PointR\x07polygonb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
