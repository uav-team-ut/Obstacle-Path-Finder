// This file is generated by rust-protobuf 2.10.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `pathfinder.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_10_1;

#[derive(PartialEq,Clone,Default)]
pub struct Plane {
    // message fields
    pub pos: ::protobuf::SingularPtrField<super::telemetry::Position>,
    pub alt: ::protobuf::SingularPtrField<super::telemetry::Altitude>,
    pub rot: ::protobuf::SingularPtrField<super::telemetry::Rotation>,
    pub vel: ::protobuf::SingularPtrField<super::telemetry::Velocity>,
    pub speed: ::protobuf::SingularPtrField<super::telemetry::Speed>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Plane {
    fn default() -> &'a Plane {
        <Plane as ::protobuf::Message>::default_instance()
    }
}

impl Plane {
    pub fn new() -> Plane {
        ::std::default::Default::default()
    }

    // .telemetry.Position pos = 1;


    pub fn get_pos(&self) -> &super::telemetry::Position {
        self.pos.as_ref().unwrap_or_else(|| super::telemetry::Position::default_instance())
    }
    pub fn clear_pos(&mut self) {
        self.pos.clear();
    }

    pub fn has_pos(&self) -> bool {
        self.pos.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pos(&mut self, v: super::telemetry::Position) {
        self.pos = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pos(&mut self) -> &mut super::telemetry::Position {
        if self.pos.is_none() {
            self.pos.set_default();
        }
        self.pos.as_mut().unwrap()
    }

    // Take field
    pub fn take_pos(&mut self) -> super::telemetry::Position {
        self.pos.take().unwrap_or_else(|| super::telemetry::Position::new())
    }

    // .telemetry.Altitude alt = 2;


    pub fn get_alt(&self) -> &super::telemetry::Altitude {
        self.alt.as_ref().unwrap_or_else(|| super::telemetry::Altitude::default_instance())
    }
    pub fn clear_alt(&mut self) {
        self.alt.clear();
    }

    pub fn has_alt(&self) -> bool {
        self.alt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_alt(&mut self, v: super::telemetry::Altitude) {
        self.alt = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_alt(&mut self) -> &mut super::telemetry::Altitude {
        if self.alt.is_none() {
            self.alt.set_default();
        }
        self.alt.as_mut().unwrap()
    }

    // Take field
    pub fn take_alt(&mut self) -> super::telemetry::Altitude {
        self.alt.take().unwrap_or_else(|| super::telemetry::Altitude::new())
    }

    // .telemetry.Rotation rot = 3;


    pub fn get_rot(&self) -> &super::telemetry::Rotation {
        self.rot.as_ref().unwrap_or_else(|| super::telemetry::Rotation::default_instance())
    }
    pub fn clear_rot(&mut self) {
        self.rot.clear();
    }

    pub fn has_rot(&self) -> bool {
        self.rot.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rot(&mut self, v: super::telemetry::Rotation) {
        self.rot = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rot(&mut self) -> &mut super::telemetry::Rotation {
        if self.rot.is_none() {
            self.rot.set_default();
        }
        self.rot.as_mut().unwrap()
    }

    // Take field
    pub fn take_rot(&mut self) -> super::telemetry::Rotation {
        self.rot.take().unwrap_or_else(|| super::telemetry::Rotation::new())
    }

    // .telemetry.Velocity vel = 4;


    pub fn get_vel(&self) -> &super::telemetry::Velocity {
        self.vel.as_ref().unwrap_or_else(|| super::telemetry::Velocity::default_instance())
    }
    pub fn clear_vel(&mut self) {
        self.vel.clear();
    }

    pub fn has_vel(&self) -> bool {
        self.vel.is_some()
    }

    // Param is passed by value, moved
    pub fn set_vel(&mut self, v: super::telemetry::Velocity) {
        self.vel = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_vel(&mut self) -> &mut super::telemetry::Velocity {
        if self.vel.is_none() {
            self.vel.set_default();
        }
        self.vel.as_mut().unwrap()
    }

    // Take field
    pub fn take_vel(&mut self) -> super::telemetry::Velocity {
        self.vel.take().unwrap_or_else(|| super::telemetry::Velocity::new())
    }

    // .telemetry.Speed speed = 5;


    pub fn get_speed(&self) -> &super::telemetry::Speed {
        self.speed.as_ref().unwrap_or_else(|| super::telemetry::Speed::default_instance())
    }
    pub fn clear_speed(&mut self) {
        self.speed.clear();
    }

    pub fn has_speed(&self) -> bool {
        self.speed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_speed(&mut self, v: super::telemetry::Speed) {
        self.speed = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_speed(&mut self) -> &mut super::telemetry::Speed {
        if self.speed.is_none() {
            self.speed.set_default();
        }
        self.speed.as_mut().unwrap()
    }

    // Take field
    pub fn take_speed(&mut self) -> super::telemetry::Speed {
        self.speed.take().unwrap_or_else(|| super::telemetry::Speed::new())
    }
}

impl ::protobuf::Message for Plane {
    fn is_initialized(&self) -> bool {
        for v in &self.pos {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.alt {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.rot {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.vel {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.speed {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.pos)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.alt)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.rot)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.vel)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.speed)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.pos.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.alt.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.rot.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.vel.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.speed.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.pos.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.alt.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.rot.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.vel.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.speed.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Plane {
        Plane::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::telemetry::Position>>(
                    "pos",
                    |m: &Plane| { &m.pos },
                    |m: &mut Plane| { &mut m.pos },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::telemetry::Altitude>>(
                    "alt",
                    |m: &Plane| { &m.alt },
                    |m: &mut Plane| { &mut m.alt },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::telemetry::Rotation>>(
                    "rot",
                    |m: &Plane| { &m.rot },
                    |m: &mut Plane| { &mut m.rot },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::telemetry::Velocity>>(
                    "vel",
                    |m: &Plane| { &m.vel },
                    |m: &mut Plane| { &mut m.vel },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::telemetry::Speed>>(
                    "speed",
                    |m: &Plane| { &m.speed },
                    |m: &mut Plane| { &mut m.speed },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Plane>(
                    "Plane",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Plane {
        static mut instance: ::protobuf::lazy::Lazy<Plane> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Plane,
        };
        unsafe {
            instance.get(Plane::new)
        }
    }
}

impl ::protobuf::Clear for Plane {
    fn clear(&mut self) {
        self.pos.clear();
        self.alt.clear();
        self.rot.clear();
        self.vel.clear();
        self.speed.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Plane {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Plane {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Request {
    // message fields
    pub flyzones: ::protobuf::RepeatedField<super::interop::InteropMission_FlyZone>,
    pub obstacles: ::protobuf::SingularPtrField<super::interop::Obstacles>,
    pub overview: ::protobuf::SingularPtrField<super::telemetry::Overview>,
    pub mission: ::protobuf::SingularPtrField<super::telemetry::RawMission>,
    pub buffer_size: f64,
    pub process_time: u32,
    pub algorithm: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Request {
    fn default() -> &'a Request {
        <Request as ::protobuf::Message>::default_instance()
    }
}

impl Request {
    pub fn new() -> Request {
        ::std::default::Default::default()
    }

    // repeated .interop.InteropMission.FlyZone flyzones = 1;


    pub fn get_flyzones(&self) -> &[super::interop::InteropMission_FlyZone] {
        &self.flyzones
    }
    pub fn clear_flyzones(&mut self) {
        self.flyzones.clear();
    }

    // Param is passed by value, moved
    pub fn set_flyzones(&mut self, v: ::protobuf::RepeatedField<super::interop::InteropMission_FlyZone>) {
        self.flyzones = v;
    }

    // Mutable pointer to the field.
    pub fn mut_flyzones(&mut self) -> &mut ::protobuf::RepeatedField<super::interop::InteropMission_FlyZone> {
        &mut self.flyzones
    }

    // Take field
    pub fn take_flyzones(&mut self) -> ::protobuf::RepeatedField<super::interop::InteropMission_FlyZone> {
        ::std::mem::replace(&mut self.flyzones, ::protobuf::RepeatedField::new())
    }

    // .interop.Obstacles obstacles = 2;


    pub fn get_obstacles(&self) -> &super::interop::Obstacles {
        self.obstacles.as_ref().unwrap_or_else(|| super::interop::Obstacles::default_instance())
    }
    pub fn clear_obstacles(&mut self) {
        self.obstacles.clear();
    }

    pub fn has_obstacles(&self) -> bool {
        self.obstacles.is_some()
    }

    // Param is passed by value, moved
    pub fn set_obstacles(&mut self, v: super::interop::Obstacles) {
        self.obstacles = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_obstacles(&mut self) -> &mut super::interop::Obstacles {
        if self.obstacles.is_none() {
            self.obstacles.set_default();
        }
        self.obstacles.as_mut().unwrap()
    }

    // Take field
    pub fn take_obstacles(&mut self) -> super::interop::Obstacles {
        self.obstacles.take().unwrap_or_else(|| super::interop::Obstacles::new())
    }

    // .telemetry.Overview overview = 3;


    pub fn get_overview(&self) -> &super::telemetry::Overview {
        self.overview.as_ref().unwrap_or_else(|| super::telemetry::Overview::default_instance())
    }
    pub fn clear_overview(&mut self) {
        self.overview.clear();
    }

    pub fn has_overview(&self) -> bool {
        self.overview.is_some()
    }

    // Param is passed by value, moved
    pub fn set_overview(&mut self, v: super::telemetry::Overview) {
        self.overview = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_overview(&mut self) -> &mut super::telemetry::Overview {
        if self.overview.is_none() {
            self.overview.set_default();
        }
        self.overview.as_mut().unwrap()
    }

    // Take field
    pub fn take_overview(&mut self) -> super::telemetry::Overview {
        self.overview.take().unwrap_or_else(|| super::telemetry::Overview::new())
    }

    // .telemetry.RawMission mission = 4;


    pub fn get_mission(&self) -> &super::telemetry::RawMission {
        self.mission.as_ref().unwrap_or_else(|| super::telemetry::RawMission::default_instance())
    }
    pub fn clear_mission(&mut self) {
        self.mission.clear();
    }

    pub fn has_mission(&self) -> bool {
        self.mission.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mission(&mut self, v: super::telemetry::RawMission) {
        self.mission = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mission(&mut self) -> &mut super::telemetry::RawMission {
        if self.mission.is_none() {
            self.mission.set_default();
        }
        self.mission.as_mut().unwrap()
    }

    // Take field
    pub fn take_mission(&mut self) -> super::telemetry::RawMission {
        self.mission.take().unwrap_or_else(|| super::telemetry::RawMission::new())
    }

    // double buffer_size = 5;


    pub fn get_buffer_size(&self) -> f64 {
        self.buffer_size
    }
    pub fn clear_buffer_size(&mut self) {
        self.buffer_size = 0.;
    }

    // Param is passed by value, moved
    pub fn set_buffer_size(&mut self, v: f64) {
        self.buffer_size = v;
    }

    // uint32 process_time = 6;


    pub fn get_process_time(&self) -> u32 {
        self.process_time
    }
    pub fn clear_process_time(&mut self) {
        self.process_time = 0;
    }

    // Param is passed by value, moved
    pub fn set_process_time(&mut self, v: u32) {
        self.process_time = v;
    }

    // string algorithm = 7;


    pub fn get_algorithm(&self) -> &str {
        &self.algorithm
    }
    pub fn clear_algorithm(&mut self) {
        self.algorithm.clear();
    }

    // Param is passed by value, moved
    pub fn set_algorithm(&mut self, v: ::std::string::String) {
        self.algorithm = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_algorithm(&mut self) -> &mut ::std::string::String {
        &mut self.algorithm
    }

    // Take field
    pub fn take_algorithm(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.algorithm, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Request {
    fn is_initialized(&self) -> bool {
        for v in &self.flyzones {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.obstacles {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.overview {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.mission {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.flyzones)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.obstacles)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.overview)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.mission)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.buffer_size = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.process_time = tmp;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.algorithm)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.flyzones {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.obstacles.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.overview.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.mission.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.buffer_size != 0. {
            my_size += 9;
        }
        if self.process_time != 0 {
            my_size += ::protobuf::rt::value_size(6, self.process_time, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.algorithm.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.algorithm);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.flyzones {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.obstacles.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.overview.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.mission.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.buffer_size != 0. {
            os.write_double(5, self.buffer_size)?;
        }
        if self.process_time != 0 {
            os.write_uint32(6, self.process_time)?;
        }
        if !self.algorithm.is_empty() {
            os.write_string(7, &self.algorithm)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Request {
        Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::interop::InteropMission_FlyZone>>(
                    "flyzones",
                    |m: &Request| { &m.flyzones },
                    |m: &mut Request| { &mut m.flyzones },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::interop::Obstacles>>(
                    "obstacles",
                    |m: &Request| { &m.obstacles },
                    |m: &mut Request| { &mut m.obstacles },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::telemetry::Overview>>(
                    "overview",
                    |m: &Request| { &m.overview },
                    |m: &mut Request| { &mut m.overview },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::telemetry::RawMission>>(
                    "mission",
                    |m: &Request| { &m.mission },
                    |m: &mut Request| { &mut m.mission },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "buffer_size",
                    |m: &Request| { &m.buffer_size },
                    |m: &mut Request| { &mut m.buffer_size },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "process_time",
                    |m: &Request| { &m.process_time },
                    |m: &mut Request| { &mut m.process_time },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "algorithm",
                    |m: &Request| { &m.algorithm },
                    |m: &mut Request| { &mut m.algorithm },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Request>(
                    "Request",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Request {
        static mut instance: ::protobuf::lazy::Lazy<Request> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Request,
        };
        unsafe {
            instance.get(Request::new)
        }
    }
}

impl ::protobuf::Clear for Request {
    fn clear(&mut self) {
        self.flyzones.clear();
        self.obstacles.clear();
        self.overview.clear();
        self.mission.clear();
        self.buffer_size = 0.;
        self.process_time = 0;
        self.algorithm.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Request {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Response {
    // message fields
    pub mission: ::protobuf::SingularPtrField<super::telemetry::RawMission>,
    pub time_to_adjust: f64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Response {
    fn default() -> &'a Response {
        <Response as ::protobuf::Message>::default_instance()
    }
}

impl Response {
    pub fn new() -> Response {
        ::std::default::Default::default()
    }

    // .telemetry.RawMission mission = 1;


    pub fn get_mission(&self) -> &super::telemetry::RawMission {
        self.mission.as_ref().unwrap_or_else(|| super::telemetry::RawMission::default_instance())
    }
    pub fn clear_mission(&mut self) {
        self.mission.clear();
    }

    pub fn has_mission(&self) -> bool {
        self.mission.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mission(&mut self, v: super::telemetry::RawMission) {
        self.mission = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mission(&mut self) -> &mut super::telemetry::RawMission {
        if self.mission.is_none() {
            self.mission.set_default();
        }
        self.mission.as_mut().unwrap()
    }

    // Take field
    pub fn take_mission(&mut self) -> super::telemetry::RawMission {
        self.mission.take().unwrap_or_else(|| super::telemetry::RawMission::new())
    }

    // double time_to_adjust = 2;


    pub fn get_time_to_adjust(&self) -> f64 {
        self.time_to_adjust
    }
    pub fn clear_time_to_adjust(&mut self) {
        self.time_to_adjust = 0.;
    }

    // Param is passed by value, moved
    pub fn set_time_to_adjust(&mut self, v: f64) {
        self.time_to_adjust = v;
    }
}

impl ::protobuf::Message for Response {
    fn is_initialized(&self) -> bool {
        for v in &self.mission {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.mission)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.time_to_adjust = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.mission.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.time_to_adjust != 0. {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.mission.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.time_to_adjust != 0. {
            os.write_double(2, self.time_to_adjust)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Response {
        Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::telemetry::RawMission>>(
                    "mission",
                    |m: &Response| { &m.mission },
                    |m: &mut Response| { &mut m.mission },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "time_to_adjust",
                    |m: &Response| { &m.time_to_adjust },
                    |m: &mut Response| { &mut m.time_to_adjust },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Response>(
                    "Response",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Response {
        static mut instance: ::protobuf::lazy::Lazy<Response> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Response,
        };
        unsafe {
            instance.get(Response::new)
        }
    }
}

impl ::protobuf::Clear for Response {
    fn clear(&mut self) {
        self.mission.clear();
        self.time_to_adjust = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Response {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10pathfinder.proto\x12\npathfinder\x1a\rinterop.proto\x1a\x0ftelemet\
    ry.proto\"\xcb\x01\n\x05Plane\x12%\n\x03pos\x18\x01\x20\x01(\x0b2\x13.te\
    lemetry.PositionR\x03pos\x12%\n\x03alt\x18\x02\x20\x01(\x0b2\x13.telemet\
    ry.AltitudeR\x03alt\x12%\n\x03rot\x18\x03\x20\x01(\x0b2\x13.telemetry.Ro\
    tationR\x03rot\x12%\n\x03vel\x18\x04\x20\x01(\x0b2\x13.telemetry.Velocit\
    yR\x03vel\x12&\n\x05speed\x18\x05\x20\x01(\x0b2\x10.telemetry.SpeedR\x05\
    speed\"\xbc\x02\n\x07Request\x12;\n\x08flyzones\x18\x01\x20\x03(\x0b2\
    \x1f.interop.InteropMission.FlyZoneR\x08flyzones\x120\n\tobstacles\x18\
    \x02\x20\x01(\x0b2\x12.interop.ObstaclesR\tobstacles\x12/\n\x08overview\
    \x18\x03\x20\x01(\x0b2\x13.telemetry.OverviewR\x08overview\x12/\n\x07mis\
    sion\x18\x04\x20\x01(\x0b2\x15.telemetry.RawMissionR\x07mission\x12\x1f\
    \n\x0bbuffer_size\x18\x05\x20\x01(\x01R\nbufferSize\x12!\n\x0cprocess_ti\
    me\x18\x06\x20\x01(\rR\x0bprocessTime\x12\x1c\n\talgorithm\x18\x07\x20\
    \x01(\tR\talgorithm\"a\n\x08Response\x12/\n\x07mission\x18\x01\x20\x01(\
    \x0b2\x15.telemetry.RawMissionR\x07mission\x12$\n\x0etime_to_adjust\x18\
    \x02\x20\x01(\x01R\x0ctimeToAdjustb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
